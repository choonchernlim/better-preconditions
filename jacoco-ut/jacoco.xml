<?xml version="1.0" encoding="UTF-8" standalone="yes"?><!DOCTYPE report PUBLIC "-//JACOCO//DTD Report 1.0//EN" "report.dtd"><report name="Better Preconditions"><sessioninfo id="R5035694-98ccce41" start="1430940806844" dump="1430940808747"/><package name="com/github/choonchernlim/betterPreconditions/core"><class name="com/github/choonchernlim/betterPreconditions/core/Matcher"><method name="&lt;init&gt;" desc="()V" line="10"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/choonchernlim/betterPreconditions/core/Assertion"><method name="&lt;init&gt;" desc="(Lcom/github/choonchernlim/betterPreconditions/core/Matcher;ZLjava/lang/Object;Ljava/lang/String;)V" line="37"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="run" desc="()V" line="48"><counter type="INSTRUCTION" missed="0" covered="36"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="51"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="12"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="2"/><counter type="CLASS" missed="0" covered="1"/></class><sourcefile name="Assertion.java"><line nr="37" mi="0" ci="2" mb="0" cb="0"/><line nr="38" mi="0" ci="3" mb="0" cb="0"/><line nr="39" mi="0" ci="3" mb="0" cb="0"/><line nr="40" mi="0" ci="3" mb="0" cb="0"/><line nr="41" mi="0" ci="3" mb="0" cb="0"/><line nr="42" mi="0" ci="1" mb="0" cb="0"/><line nr="48" mi="0" ci="3" mb="0" cb="2"/><line nr="49" mi="0" ci="8" mb="0" cb="2"/><line nr="50" mi="0" ci="8" mb="0" cb="0"/><line nr="53" mi="0" ci="8" mb="0" cb="2"/><line nr="54" mi="0" ci="8" mb="0" cb="0"/><line nr="56" mi="0" ci="1" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="51"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="12"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="2"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="Matcher.java"><line nr="10" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><counter type="INSTRUCTION" missed="0" covered="54"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="13"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="2"/></package><package name="com/github/choonchernlim/betterPreconditions/preconditions"><class name="com/github/choonchernlim/betterPreconditions/preconditions/StringPreconditions"><method name="&lt;init&gt;" desc="(Ljava/lang/String;Ljava/lang/String;)V" line="20"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="expect" desc="(Ljava/lang/String;)Lcom/github/choonchernlim/betterPreconditions/preconditions/StringPreconditions;" line="30"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="expect" desc="(Ljava/lang/String;Ljava/lang/String;)Lcom/github/choonchernlim/betterPreconditions/preconditions/StringPreconditions;" line="41"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toBeBlank" desc="()Lcom/github/choonchernlim/betterPreconditions/preconditions/StringPreconditions;" line="50"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="4"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/choonchernlim/betterPreconditions/preconditions/JodaTimePreconditions$2"><method name="&lt;init&gt;" desc="(Lcom/github/choonchernlim/betterPreconditions/preconditions/JodaTimePreconditions;Lorg/joda/time/base/BaseLocal;Ljava/lang/String;)V" line="1"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="match" desc="(Lorg/joda/time/base/BaseLocal;Ljava/lang/String;)Z" line="105"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getException" desc="(Lorg/joda/time/base/BaseLocal;Ljava/lang/String;)Lcom/github/choonchernlim/betterPreconditions/exception/PreconditionException;" line="112"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNegatedException" desc="(Lorg/joda/time/base/BaseLocal;Ljava/lang/String;)Lcom/github/choonchernlim/betterPreconditions/exception/PreconditionException;" line="120"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="55"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="12"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="4"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/choonchernlim/betterPreconditions/preconditions/JodaTimePreconditions$1"><method name="&lt;init&gt;" desc="(Lcom/github/choonchernlim/betterPreconditions/preconditions/JodaTimePreconditions;Lorg/joda/time/base/BaseLocal;Ljava/lang/String;)V" line="1"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="match" desc="(Lorg/joda/time/base/BaseLocal;Ljava/lang/String;)Z" line="68"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getException" desc="(Lorg/joda/time/base/BaseLocal;Ljava/lang/String;)Lcom/github/choonchernlim/betterPreconditions/exception/PreconditionException;" line="73"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNegatedException" desc="(Lorg/joda/time/base/BaseLocal;Ljava/lang/String;)Lcom/github/choonchernlim/betterPreconditions/exception/PreconditionException;" line="78"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="45"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="4"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/choonchernlim/betterPreconditions/preconditions/JodaTimePreconditions"><method name="&lt;init&gt;" desc="(Lorg/joda/time/base/BaseLocal;Ljava/lang/String;)V" line="22"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="expect" desc="(Lorg/joda/time/base/BaseLocal;)Lcom/github/choonchernlim/betterPreconditions/preconditions/JodaTimePreconditions;" line="32"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="expect" desc="(Lorg/joda/time/base/BaseLocal;Ljava/lang/String;)Lcom/github/choonchernlim/betterPreconditions/preconditions/JodaTimePreconditions;" line="43"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toBeEqual" desc="(Lorg/joda/time/base/BaseLocal;)Lcom/github/choonchernlim/betterPreconditions/preconditions/JodaTimePreconditions;" line="52"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toBeEqual" desc="(Lorg/joda/time/base/BaseLocal;Ljava/lang/String;)Lcom/github/choonchernlim/betterPreconditions/preconditions/JodaTimePreconditions;" line="63"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toBeEqualOrAfter" desc="(Lorg/joda/time/base/BaseLocal;)Lcom/github/choonchernlim/betterPreconditions/preconditions/JodaTimePreconditions;" line="89"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toBeEqualOrAfter" desc="(Lorg/joda/time/base/BaseLocal;Ljava/lang/String;)Lcom/github/choonchernlim/betterPreconditions/preconditions/JodaTimePreconditions;" line="100"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="expectValueLabelToExist" desc="(Lorg/joda/time/base/BaseLocal;Ljava/lang/String;)V" line="129"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="59"/><counter type="LINE" missed="0" covered="12"/><counter type="COMPLEXITY" missed="0" covered="8"/><counter type="METHOD" missed="0" covered="8"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/choonchernlim/betterPreconditions/preconditions/BetterPreconditions$1"><method name="&lt;init&gt;" desc="(Lcom/github/choonchernlim/betterPreconditions/preconditions/BetterPreconditions;)V" line="1"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="match" desc="(Ljava/lang/Object;Ljava/lang/String;)Z" line="80"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getException" desc="(Ljava/lang/Object;Ljava/lang/String;)Lcom/github/choonchernlim/betterPreconditions/exception/PreconditionException;" line="85"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNegatedException" desc="(Ljava/lang/Object;Ljava/lang/String;)Lcom/github/choonchernlim/betterPreconditions/exception/PreconditionException;" line="90"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="4"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/choonchernlim/betterPreconditions/preconditions/ObjectPreconditions"><method name="&lt;init&gt;" desc="(Ljava/lang/Object;Ljava/lang/String;)V" line="14"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="expect" desc="(Ljava/lang/Object;)Lcom/github/choonchernlim/betterPreconditions/preconditions/ObjectPreconditions;" line="24"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="expect" desc="(Ljava/lang/Object;Ljava/lang/String;)Lcom/github/choonchernlim/betterPreconditions/preconditions/ObjectPreconditions;" line="35"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/choonchernlim/betterPreconditions/preconditions/CollectionPreconditions"><method name="&lt;init&gt;" desc="(Ljava/util/Collection;Ljava/lang/String;)V" line="21"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="expect" desc="(Ljava/util/Collection;)Lcom/github/choonchernlim/betterPreconditions/preconditions/CollectionPreconditions;" line="31"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="expect" desc="(Ljava/util/Collection;Ljava/lang/String;)Lcom/github/choonchernlim/betterPreconditions/preconditions/CollectionPreconditions;" line="42"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toBeEmpty" desc="()Lcom/github/choonchernlim/betterPreconditions/preconditions/CollectionPreconditions;" line="51"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="4"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/choonchernlim/betterPreconditions/preconditions/BooleanPreconditions$1"><method name="&lt;init&gt;" desc="(Lcom/github/choonchernlim/betterPreconditions/preconditions/BooleanPreconditions;)V" line="1"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="match" desc="(Ljava/lang/Boolean;Ljava/lang/String;)Z" line="52"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getException" desc="(Ljava/lang/Boolean;Ljava/lang/String;)Lcom/github/choonchernlim/betterPreconditions/exception/PreconditionException;" line="57"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNegatedException" desc="(Ljava/lang/Boolean;Ljava/lang/String;)Lcom/github/choonchernlim/betterPreconditions/exception/PreconditionException;" line="62"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="29"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="4"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/choonchernlim/betterPreconditions/preconditions/BetterPreconditions"><method name="&lt;init&gt;" desc="(Ljava/lang/Object;Ljava/lang/String;)V" line="46"><counter type="INSTRUCTION" missed="6" covered="20"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="1" covered="7"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="not" desc="()Ljava/lang/Object;" line="66"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toBeNull" desc="()Ljava/lang/Object;" line="77"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="customMatcher" desc="(Lcom/github/choonchernlim/betterPreconditions/core/Matcher;)Ljava/lang/Object;" line="105"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="()Ljava/lang/Object;" line="117"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="expectValueLabelToExist" desc="(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/String;)V" line="132"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="6" covered="88"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="1" covered="20"/><counter type="COMPLEXITY" missed="1" covered="7"/><counter type="METHOD" missed="0" covered="6"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/choonchernlim/betterPreconditions/preconditions/IntegerPreconditions"><method name="&lt;init&gt;" desc="()V" line="3"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="mustBeEqual" desc="(Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/String;Ljava/lang/String;)V" line="10"><counter type="INSTRUCTION" missed="1" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="mustBeEqualOrGreaterThan" desc="(Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/String;Ljava/lang/String;)V" line="17"><counter type="INSTRUCTION" missed="1" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="mustBeGreater" desc="(Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/String;Ljava/lang/String;)V" line="24"><counter type="INSTRUCTION" missed="1" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="mustBeEqualOrLessThan" desc="(Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/String;Ljava/lang/String;)V" line="31"><counter type="INSTRUCTION" missed="1" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="mustBeLessThan" desc="(Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/String;Ljava/lang/String;)V" line="38"><counter type="INSTRUCTION" missed="1" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="6" covered="0"/><counter type="METHOD" missed="6" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="com/github/choonchernlim/betterPreconditions/preconditions/BooleanPreconditions"><method name="&lt;init&gt;" desc="(Ljava/lang/Boolean;Ljava/lang/String;)V" line="19"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="expect" desc="(Ljava/lang/Boolean;)Lcom/github/choonchernlim/betterPreconditions/preconditions/BooleanPreconditions;" line="29"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="expect" desc="(Ljava/lang/Boolean;Ljava/lang/String;)Lcom/github/choonchernlim/betterPreconditions/preconditions/BooleanPreconditions;" line="40"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toBeTrue" desc="()Lcom/github/choonchernlim/betterPreconditions/preconditions/BooleanPreconditions;" line="49"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="4"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/choonchernlim/betterPreconditions/preconditions/StringPreconditions$1"><method name="&lt;init&gt;" desc="(Lcom/github/choonchernlim/betterPreconditions/preconditions/StringPreconditions;)V" line="1"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="match" desc="(Ljava/lang/String;Ljava/lang/String;)Z" line="53"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getException" desc="(Ljava/lang/String;Ljava/lang/String;)Lcom/github/choonchernlim/betterPreconditions/exception/PreconditionException;" line="58"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNegatedException" desc="(Ljava/lang/String;Ljava/lang/String;)Lcom/github/choonchernlim/betterPreconditions/exception/PreconditionException;" line="63"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="4"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/choonchernlim/betterPreconditions/preconditions/CollectionPreconditions$1"><method name="&lt;init&gt;" desc="(Lcom/github/choonchernlim/betterPreconditions/preconditions/CollectionPreconditions;)V" line="1"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="match" desc="(Ljava/util/Collection;Ljava/lang/String;)Z" line="54"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getException" desc="(Ljava/util/Collection;Ljava/lang/String;)Lcom/github/choonchernlim/betterPreconditions/exception/PreconditionException;" line="59"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNegatedException" desc="(Ljava/util/Collection;Ljava/lang/String;)Lcom/github/choonchernlim/betterPreconditions/exception/PreconditionException;" line="64"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="29"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="4"/><counter type="CLASS" missed="0" covered="1"/></class><sourcefile name="IntegerPreconditions.java"><line nr="3" mi="3" ci="0" mb="0" cb="0"/><line nr="10" mi="1" ci="0" mb="0" cb="0"/><line nr="17" mi="1" ci="0" mb="0" cb="0"/><line nr="24" mi="1" ci="0" mb="0" cb="0"/><line nr="31" mi="1" ci="0" mb="0" cb="0"/><line nr="38" mi="1" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="6" covered="0"/><counter type="METHOD" missed="6" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><sourcefile name="ObjectPreconditions.java"><line nr="14" mi="0" ci="4" mb="0" cb="0"/><line nr="15" mi="0" ci="1" mb="0" cb="0"/><line nr="24" mi="0" ci="4" mb="0" cb="0"/><line nr="35" mi="0" ci="6" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="StringPreconditions.java"><line nr="1" mi="0" ci="3" mb="0" cb="0"/><line nr="20" mi="0" ci="4" mb="0" cb="0"/><line nr="21" mi="0" ci="1" mb="0" cb="0"/><line nr="30" mi="0" ci="4" mb="0" cb="0"/><line nr="41" mi="0" ci="6" mb="0" cb="0"/><line nr="50" mi="0" ci="11" mb="0" cb="0"/><line nr="53" mi="0" ci="5" mb="0" cb="0"/><line nr="58" mi="0" ci="6" mb="0" cb="0"/><line nr="63" mi="0" ci="6" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="46"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="8"/><counter type="METHOD" missed="0" covered="8"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="BooleanPreconditions.java"><line nr="1" mi="0" ci="3" mb="0" cb="0"/><line nr="19" mi="0" ci="4" mb="0" cb="0"/><line nr="20" mi="0" ci="1" mb="0" cb="0"/><line nr="29" mi="0" ci="4" mb="0" cb="0"/><line nr="40" mi="0" ci="6" mb="0" cb="0"/><line nr="49" mi="0" ci="11" mb="0" cb="0"/><line nr="52" mi="0" ci="11" mb="0" cb="0"/><line nr="57" mi="0" ci="6" mb="0" cb="0"/><line nr="62" mi="0" ci="6" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="52"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="8"/><counter type="METHOD" missed="0" covered="8"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="BetterPreconditions.java"><line nr="1" mi="0" ci="3" mb="0" cb="0"/><line nr="46" mi="0" ci="2" mb="0" cb="0"/><line nr="49" mi="0" ci="5" mb="1" cb="1"/><line nr="50" mi="6" ci="0" mb="0" cb="0"/><line nr="53" mi="0" ci="3" mb="0" cb="0"/><line nr="54" mi="0" ci="3" mb="0" cb="0"/><line nr="55" mi="0" ci="3" mb="0" cb="0"/><line nr="56" mi="0" ci="3" mb="0" cb="0"/><line nr="57" mi="0" ci="1" mb="0" cb="0"/><line nr="66" mi="0" ci="3" mb="0" cb="0"/><line nr="67" mi="0" ci="2" mb="0" cb="0"/><line nr="77" mi="0" ci="10" mb="0" cb="0"/><line nr="80" mi="0" ci="6" mb="0" cb="2"/><line nr="85" mi="0" ci="6" mb="0" cb="0"/><line nr="90" mi="0" ci="6" mb="0" cb="0"/><line nr="94" mi="0" ci="2" mb="0" cb="0"/><line nr="105" mi="0" ci="14" mb="0" cb="0"/><line nr="108" mi="0" ci="3" mb="0" cb="0"/><line nr="110" mi="0" ci="2" mb="0" cb="0"/><line nr="117" mi="0" ci="12" mb="0" cb="2"/><line nr="118" mi="0" ci="2" mb="0" cb="0"/><line nr="121" mi="0" ci="3" mb="0" cb="0"/><line nr="132" mi="0" ci="8" mb="0" cb="0"/><line nr="133" mi="0" ci="9" mb="0" cb="0"/><line nr="134" mi="0" ci="1" mb="0" cb="0"/><counter type="INSTRUCTION" missed="6" covered="112"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="1" covered="24"/><counter type="COMPLEXITY" missed="1" covered="12"/><counter type="METHOD" missed="0" covered="10"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="CollectionPreconditions.java"><line nr="1" mi="0" ci="3" mb="0" cb="0"/><line nr="21" mi="0" ci="4" mb="0" cb="0"/><line nr="22" mi="0" ci="1" mb="0" cb="0"/><line nr="31" mi="0" ci="4" mb="0" cb="0"/><line nr="42" mi="0" ci="6" mb="0" cb="0"/><line nr="51" mi="0" ci="11" mb="0" cb="0"/><line nr="54" mi="0" ci="11" mb="0" cb="0"/><line nr="59" mi="0" ci="6" mb="0" cb="0"/><line nr="64" mi="0" ci="6" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="52"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="0" covered="8"/><counter type="METHOD" missed="0" covered="8"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="JodaTimePreconditions.java"><line nr="1" mi="0" ci="18" mb="0" cb="0"/><line nr="22" mi="0" ci="4" mb="0" cb="0"/><line nr="23" mi="0" ci="1" mb="0" cb="0"/><line nr="32" mi="0" ci="4" mb="0" cb="0"/><line nr="43" mi="0" ci="6" mb="0" cb="0"/><line nr="52" mi="0" ci="5" mb="0" cb="0"/><line nr="63" mi="0" ci="4" mb="0" cb="0"/><line nr="65" mi="0" ci="13" mb="0" cb="0"/><line nr="68" mi="0" ci="13" mb="0" cb="0"/><line nr="73" mi="0" ci="10" mb="0" cb="0"/><line nr="78" mi="0" ci="10" mb="0" cb="0"/><line nr="89" mi="0" ci="5" mb="0" cb="0"/><line nr="100" mi="0" ci="4" mb="0" cb="0"/><line nr="102" mi="0" ci="13" mb="0" cb="0"/><line nr="105" mi="0" ci="9" mb="0" cb="0"/><line nr="107" mi="0" ci="14" mb="0" cb="4"/><line nr="112" mi="0" ci="5" mb="0" cb="0"/><line nr="113" mi="0" ci="1" mb="0" cb="0"/><line nr="114" mi="0" ci="2" mb="0" cb="0"/><line nr="115" mi="0" ci="2" mb="0" cb="0"/><line nr="120" mi="0" ci="5" mb="0" cb="0"/><line nr="121" mi="0" ci="1" mb="0" cb="0"/><line nr="122" mi="0" ci="2" mb="0" cb="0"/><line nr="123" mi="0" ci="2" mb="0" cb="0"/><line nr="129" mi="0" ci="5" mb="0" cb="0"/><line nr="130" mi="0" ci="1" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="159"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="26"/><counter type="COMPLEXITY" missed="0" covered="18"/><counter type="METHOD" missed="0" covered="16"/><counter type="CLASS" missed="0" covered="3"/></sourcefile><counter type="INSTRUCTION" missed="14" covered="436"/><counter type="BRANCH" missed="1" covered="9"/><counter type="LINE" missed="7" covered="81"/><counter type="COMPLEXITY" missed="7" covered="57"/><counter type="METHOD" missed="6" covered="53"/><counter type="CLASS" missed="1" covered="12"/></package><package name="com/github/choonchernlim/betterPreconditions/exception"><class name="com/github/choonchernlim/betterPreconditions/exception/JodaTimeEqualOrAfterPreconditionException"><method name="&lt;init&gt;" desc="(Lorg/joda/time/base/BaseLocal;Ljava/lang/String;Lorg/joda/time/base/BaseLocal;Ljava/lang/String;)V" line="22"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/choonchernlim/betterPreconditions/exception/CollectionEmptyPreconditionException"><method name="&lt;init&gt;" desc="(Ljava/util/Collection;Ljava/lang/String;)V" line="17"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/choonchernlim/betterPreconditions/exception/StringNotBlankPreconditionException"><method name="&lt;init&gt;" desc="(Ljava/lang/String;Ljava/lang/String;)V" line="15"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/choonchernlim/betterPreconditions/exception/BooleanTruePreconditionException"><method name="&lt;init&gt;" desc="(Ljava/lang/Boolean;Ljava/lang/String;)V" line="15"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/choonchernlim/betterPreconditions/exception/JodaTimeNotEqualPreconditionException"><method name="&lt;init&gt;" desc="(Lorg/joda/time/base/BaseLocal;Ljava/lang/String;Lorg/joda/time/base/BaseLocal;Ljava/lang/String;)V" line="22"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/choonchernlim/betterPreconditions/exception/BooleanFalsePreconditionException"><method name="&lt;init&gt;" desc="(Ljava/lang/Boolean;Ljava/lang/String;)V" line="15"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/choonchernlim/betterPreconditions/exception/JodaTimeNotEqualOrAfterPreconditionException"><method name="&lt;init&gt;" desc="(Lorg/joda/time/base/BaseLocal;Ljava/lang/String;Lorg/joda/time/base/BaseLocal;Ljava/lang/String;)V" line="22"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/choonchernlim/betterPreconditions/exception/CollectionNotEmptyPreconditionException"><method name="&lt;init&gt;" desc="(Ljava/util/Collection;Ljava/lang/String;)V" line="17"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/choonchernlim/betterPreconditions/exception/PreconditionException"><method name="&lt;init&gt;" desc="(Ljava/lang/String;)V" line="14"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/choonchernlim/betterPreconditions/exception/ObjectNotNullPreconditionException"><method name="&lt;init&gt;" desc="(Ljava/lang/Object;Ljava/lang/String;)V" line="15"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/choonchernlim/betterPreconditions/exception/JodaTimeEqualPreconditionException"><method name="&lt;init&gt;" desc="(Lorg/joda/time/base/BaseLocal;Ljava/lang/String;Lorg/joda/time/base/BaseLocal;Ljava/lang/String;)V" line="22"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/choonchernlim/betterPreconditions/exception/ObjectNullPreconditionException"><method name="&lt;init&gt;" desc="(Ljava/lang/Object;Ljava/lang/String;)V" line="15"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/github/choonchernlim/betterPreconditions/exception/StringBlankPreconditionException"><method name="&lt;init&gt;" desc="(Ljava/lang/String;Ljava/lang/String;)V" line="15"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/><counter type="CLASS" missed="0" covered="1"/></class><sourcefile name="CollectionNotEmptyPreconditionException.java"><line nr="17" mi="0" ci="16" mb="0" cb="0"/><line nr="18" mi="0" ci="1" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="BooleanFalsePreconditionException.java"><line nr="15" mi="0" ci="14" mb="0" cb="0"/><line nr="16" mi="0" ci="1" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="ObjectNotNullPreconditionException.java"><line nr="15" mi="0" ci="14" mb="0" cb="0"/><line nr="16" mi="0" ci="1" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="JodaTimeNotEqualPreconditionException.java"><line nr="22" mi="0" ci="6" mb="0" cb="0"/><line nr="23" mi="0" ci="4" mb="0" cb="0"/><line nr="24" mi="0" ci="4" mb="0" cb="0"/><line nr="25" mi="0" ci="4" mb="0" cb="0"/><line nr="26" mi="0" ci="4" mb="0" cb="0"/><line nr="27" mi="0" ci="1" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="PreconditionException.java"><line nr="14" mi="0" ci="3" mb="0" cb="0"/><line nr="15" mi="0" ci="1" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="CollectionEmptyPreconditionException.java"><line nr="17" mi="0" ci="16" mb="0" cb="0"/><line nr="18" mi="0" ci="1" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="JodaTimeEqualPreconditionException.java"><line nr="22" mi="0" ci="6" mb="0" cb="0"/><line nr="23" mi="0" ci="4" mb="0" cb="0"/><line nr="24" mi="0" ci="4" mb="0" cb="0"/><line nr="25" mi="0" ci="4" mb="0" cb="0"/><line nr="26" mi="0" ci="4" mb="0" cb="0"/><line nr="27" mi="0" ci="1" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="ObjectNullPreconditionException.java"><line nr="15" mi="0" ci="14" mb="0" cb="0"/><line nr="16" mi="0" ci="1" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="JodaTimeNotEqualOrAfterPreconditionException.java"><line nr="22" mi="0" ci="6" mb="0" cb="0"/><line nr="23" mi="0" ci="4" mb="0" cb="0"/><line nr="24" mi="0" ci="4" mb="0" cb="0"/><line nr="25" mi="0" ci="4" mb="0" cb="0"/><line nr="26" mi="0" ci="4" mb="0" cb="0"/><line nr="27" mi="0" ci="1" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="StringNotBlankPreconditionException.java"><line nr="15" mi="0" ci="14" mb="0" cb="0"/><line nr="16" mi="0" ci="1" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="StringBlankPreconditionException.java"><line nr="15" mi="0" ci="14" mb="0" cb="0"/><line nr="16" mi="0" ci="1" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="BooleanTruePreconditionException.java"><line nr="15" mi="0" ci="14" mb="0" cb="0"/><line nr="16" mi="0" ci="1" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="JodaTimeEqualOrAfterPreconditionException.java"><line nr="22" mi="0" ci="6" mb="0" cb="0"/><line nr="23" mi="0" ci="4" mb="0" cb="0"/><line nr="24" mi="0" ci="4" mb="0" cb="0"/><line nr="25" mi="0" ci="4" mb="0" cb="0"/><line nr="26" mi="0" ci="4" mb="0" cb="0"/><line nr="27" mi="0" ci="1" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><counter type="INSTRUCTION" missed="0" covered="220"/><counter type="LINE" missed="0" covered="42"/><counter type="COMPLEXITY" missed="0" covered="13"/><counter type="METHOD" missed="0" covered="13"/><counter type="CLASS" missed="0" covered="13"/></package><counter type="INSTRUCTION" missed="14" covered="710"/><counter type="BRANCH" missed="1" covered="15"/><counter type="LINE" missed="7" covered="136"/><counter type="COMPLEXITY" missed="7" covered="76"/><counter type="METHOD" missed="6" covered="69"/><counter type="CLASS" missed="1" covered="27"/></report>